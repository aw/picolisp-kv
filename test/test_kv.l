# Key/Value tests

[de test-commands-append ()
  (kv-cmd-rpush "appendlist" (kv-name "appendlist") '("one" "two"))
  (assert-nil (kv-cmd-append) "[APPEND] Should return NIL if no key is provided")
  (assert-nil (kv-cmd-append "testkey") "[APPEND] Should return NIL if no value is provided")
  (assert-nil (kv-cmd-append "appendlist" "test") "[APPEND] Should return NIL if the key is not a string")
  (kv-cmd-set "appendkey" "hello")
  (assert-equal 10 (kv-cmd-append "appendkey" "world") "[APPEND] Should append a key and return its length")
  (assert-equal "helloworld" (kv-cmd-get "appendkey") "[GET] Should return the value of the key")
  ]

[de test-commands-get-set ()
  (assert-nil (kv-cmd-set) "[SET] Should return NIL if no key is provided")
  (assert-nil (kv-cmd-set "testkey") "[SET] Should return NIL if no value is provided")
  (assert-nil (kv-cmd-get) "[GET] Should return NIL if no key is provided")
  (assert-nil (kv-cmd-get (kv-name "nonexistant")) "[GET] Should return NIL if the key doesn't exist")
  (assert-equal "OK" (kv-cmd-set "testkey" "testvalue") "[SET] Should set a key and return OK")
  (assert-equal "testvalue" (kv-cmd-get "testkey") "[GET] Should return the value of the key")
  (assert-equal "testvalue" (kv-cmd-getset "testkey" "newvalue") "[GETSET] Should return the old value")
  (assert-equal "newvalue" (kv-cmd-get "testkey") "[GETSET] Should return the new value")
  ]

[de test-commands-rpush ()
  (assert-nil (kv-cmd-rpush) "[RPUSH] Should return NIL if no key is provided")
  (assert-nil (kv-cmd-rpush "tasks") "[RPUSH] Should return NIL if only 1 key is provided")
  (assert-nil (kv-cmd-rpush "tasks" (kv-name "tasks")) "[RPUSH] Should return NIL if no elements are provided")
  (assert-nil (kv-cmd-rpush "tasks" (kv-name "tasks") "element 1") "[RPUSH] Should return NIL if the elements aren't a list")
  (off *KV/%stats%/keys)
  (off *KV/tasks)
  (assert-equal 5 (kv-cmd-rpush "tasks" (kv-name "tasks") '("task1" "task2" "task3" "task4" "task5")) "[RPUSH] Should return the length of the new list")
  (assert-equal 7 (kv-cmd-rpush "tasks" (kv-name "tasks") '("task6" "task7")) "[RPUSH] Should return the extended length of the list")
  (assert-equal '("task1" "task2") (kv-cmd-lrange "tasks" 0 1) "[LRANGE] Should return the keys in the range 0 1")
  (assert-equal "task1" (kv-cmd-lindex "tasks" 0) "[LINDEX] Should return the key at index 0")
  (assert-equal "task5" (kv-cmd-lindex "tasks" 4) "[LINDEX] Should return the key at index 5")
  (assert-equal "task7" (kv-cmd-lindex "tasks" -1) "[LINDEX] Should return the last key")
  (assert-equal "task6" (kv-cmd-lindex "tasks" -2) "[LINDEX] Should return the penultimate key")
  (assert-nil (kv-cmd-lindex "tasks" 10) "[LINDEX] Should return NIL if no value exists at the index")
  (assert-equal 1 (kv-cmd-llen (kv-name "%stats%/keys")) "[LLEN] Should return the number of keys in the keys list")
  (assert-equal "tasks" (kv-cmd-lindex "%stats%/keys" 0) "[LINDEX] Should return the name of the key in the keys list")
  (assert-equal "task1" (kv-cmd-lpop "tasks") "[LPOP] Should return the first value added to the tasks list")
  (assert-equal 6 (kv-cmd-llen (kv-name "tasks")) "[LLEN] Should return the number of keys remaining in the tasks list")
  (assert-equal 1 (kv-cmd-lrem "tasks" 3 "task3") "[LREM] Should return the number of keys removed from the task list")
  (assert-equal 5 (kv-cmd-llen (kv-name "tasks")) "[LLEN] Should return the number of keys in the keys list (shortened)")
  (assert-equal "OK" (kv-cmd-lset "tasks" 4 "task8") "[LSET] Should return OK if the task value was replaced")
  (assert-nil (kv-cmd-lset "tasks" 10 "task8") "[LSET] Should return NIL if the task value can't be replaced")
  (assert-equal "task8" (kv-cmd-lindex "tasks" 4) "[LINDEX] Should return the value of the key in the keys list")
  (assert-equal "OK" (kv-cmd-ltrim "tasks" 0 1) "[LTRIM] Should return OK when if the task list is trimmed")
  (assert-equal 2 (kv-cmd-llen (kv-name "tasks")) "[LLEN] Should return the number of keys in the keys list (shortened again)")
  ]

[de test-commands-lpush ()
  (assert-nil (kv-cmd-lpush) "[LPUSH] Should return NIL if no key is provided")
  (assert-nil (kv-cmd-lpush "tasks") "[LPUSH] Should return NIL if only 1 key is provided")
  (assert-nil (kv-cmd-lpush "tasks" (kv-name "tasks")) "[LPUSH] Should return NIL if no elements are provided")
  (assert-nil (kv-cmd-lpush "tasks" (kv-name "tasks") "element 1") "[LPUSH] Should return NIL if the elements aren't a list")
  (off *KV/%stats%/keys)
  (off *KV/tasks)
  (assert-equal 5 (kv-cmd-lpush "tasks" (kv-name "tasks") '("task1" "task2" "task3" "task4" "task5")) "[LPUSH] Should return the length of the new list")
  (assert-equal 7 (kv-cmd-lpush "tasks" (kv-name "tasks") '("task6" "task7")) "[LPUSH] Should return the extended length of the list")
  (assert-equal "task7" (kv-cmd-lindex "tasks" 0) "[LINDEX] Should return the key at index 0")
  (assert-equal "task3" (kv-cmd-lindex "tasks" 4) "[LINDEX] Should return the key at index 5")
  (assert-equal "task1" (kv-cmd-lindex "tasks" -1) "[LINDEX] Should return the last key")
  (assert-equal "task2" (kv-cmd-lindex "tasks" -2) "[LINDEX] Should return the penultimate key")
  (assert-nil (kv-cmd-lindex "tasks" 10) "[LINDEX] Should return NIL if no value exists at the index")
  (assert-equal 1 (kv-cmd-llen (kv-name "%stats%/keys")) "[LLEN] Should return the number of keys in the keys list")
  (assert-equal "tasks" (kv-cmd-lindex "%stats%/keys" 0) "[LINDEX] Should return the name of the key in the keys list")
  (assert-equal "task7" (kv-cmd-lpop "tasks") "[LPOP] Should return the first value added to the tasks list")
  (assert-equal 6 (kv-cmd-llen (kv-name "tasks")) "[LLEN] Should return the number of keys remaining in the tasks list")
  ]

[de test-commands-stats-failures ()
  (assert-nil (kv-cmd-set "%stats%/connected_clients" 0) "[SET] Should fail to overwrite a stats key")
  (assert-nil (kv-cmd-rpush "%stats%/connected_clients" (kv-name "%stats%/connected_clients") '(1 2 3)) "[RPUSH] Should fail to rpush to a stats key")
  (assert-nil (kv-cmd-lpop (kv-name "%stats%/connected_clients")) "[LPOP] Should fail to left-pop a stats key")
  (assert-nil (kv-cmd-lpoprpush (kv-name "%stats%/connected_clients") "destkey") "[LPOPRPUSH] Should fail to left-pop a stats key")
  (assert-nil (kv-cmd-lpoprpush (kv-name "sourcekey") "%stats%/connected_clients") "[LPOPRPUSH] Should fail to rpush to a stats key")
  (assert-equal 0 (kv-cmd-del "%stats%/connected_clients") "[DEL] Should fail to delete a stats key")
  (assert-equal 1 (kv-cmd-del "validkey" (list "%stats%/connected_clients")) "[DEL] Should fail to delete multiple stats key")
  ]

[de test-commands-lindex ()
  (assert-nil (kv-cmd-lindex) "[LINDEX] Should return NIL if no key is provided")
  (assert-nil (kv-cmd-lindex "testindex") "[LINDEX] Should return NIL if no index is provided")
  (assert-nil (kv-cmd-lindex "nonexistant") "[LINDEX] Should return NIL if the key doesn't exist")
  (assert-nil (kv-cmd-lindex "testindex" "abc") "[LINDEX] Should return NIL if index isn't a number")
  ]

[de test-commands-ident ()
  (assert-nil (kv-cmd-ident) "[IDENT] Should return NIL if no child pid is provided")
  (assert-nil (kv-cmd-ident 12345) "[IDENT] Should return NIL if no elements are provided")
  (assert-nil (kv-cmd-ident 12345 "abc") "[IDENT] Should return NIL if elements aren't a list")
  (assert-equal "OK abc" (kv-cmd-ident 12345 (list (cons "name" "abc"))) "[IDENT] Should return OK with the client ID")
  (assert-equal '12345 (cdr (assoc "pid" (cadr (kv-cmd-lindex "%stats%/connected_clients" 0)))) "[LINDEX] Should return the info of the connected client")
  (assert-kind-of 'Number (kv-cmd-llen (kv-name "%stats%/connected_clients")) "[LLEN] Should show only 1 connected client")
  ]

[de test-commands-info ()
  (assert-equal *KV_port (cdr (assoc "tcp_port" (kv-info-server))) "[INFO-SERVER] Should return a list of server INFO")
  (assert-nil (cdr (assoc "connected_clients" (kv-info-server))) "[INFO-CLIENTS] Should return a list of clients INFO")
  (assert-kind-of 'String (cdr (assoc "used_memory_human" (kv-info-memory))) "[INFO-MEMORY] Should return a list of memory INFO")
  (assert-kind-of 'Number (cdr (assoc "total_connections_received" (kv-info-stats))) "[INFO-STATS] Should return a list of stats INFO")
  (assert-kind-of 'String (kv-info-default) "[INFO] Should return a string of INFO")
  ]

[de test-commands-lpop ()
  (assert-nil (kv-cmd-lpop) "[LPOP] Should return NIL if no key is provided")
  (assert-nil (kv-cmd-lpop "nonexistant") "[LPOP] Should return NIL if the key doesn't exist")
  ]

[de test-commands-rpop ()
  (assert-nil (kv-cmd-rpop) "[RPOP] Should return NIL if no key is provided")
  (assert-nil (kv-cmd-rpop "nonexistant") "[RPOP] Should return NIL if the key doesn't exist")
  ]

[de test-commands-lpoprpush ()
  (off *KV/inkey)
  (off *KV/outkey)
  (assert-nil (kv-cmd-lpoprpush) "[LPOPRPUSH] Should return NIL if no source is provided")
  (assert-nil (kv-cmd-lpoprpush "inkey") "[LPOPRPUSH] Should return NIL if no dest is provided")
  (assert-nil (kv-cmd-lpoprpush "nonexistant") "[LPOPRPUSH] Should return NIL if the key doesn't exist")
  (kv-cmd-rpush "inkey" (kv-name "inkey") '(5 6 7 8 9))
  (assert-equal 5 (kv-cmd-lpoprpush "inkey" "outkey") "[LPOPRPUSH] Should return the element being popped")
  (assert-equal 4 (kv-cmd-llen (kv-name "inkey")) "[LLEN] Should list only 4 elements in the source key")
  (assert-equal 1 (kv-cmd-llen (kv-name "outkey")) "[LLEN] Should list only 1 element in the dest key")
  (assert-equal 5 (kv-cmd-lindex "outkey" 0) "[LINDEX] Should return the value of the popped key")
  (assert-equal 6 (kv-cmd-lindex "inkey" 0) "[LINDEX] Should return the value of the first key")
  (assert-equal 6 (kv-cmd-lpoprpush "inkey" "outkey") "[LPOPRPUSH] Should return the element being popped (again)")
  ]

[de test-commands-lrange ()
  (assert-nil (kv-cmd-lrange) "[LRANGE] Should return NIL if no key is provided")
  (assert-nil (kv-cmd-lrange "nonexistant") "[LRANGE] Should return NIL if the key doesn't exist")
  (assert-nil (kv-cmd-lrange "inkey" -1 -2) "[LRANGE] Should return NIL if the range has a negative number")
  ]

[de test-commands-lrem ()
  (assert-equal 0 (kv-cmd-lrem) "[LREM] Should return NIL if no key is provided")
  (assert-equal 0 (kv-cmd-lrem "nonexistant") "[LREM] Should return NIL if the key doesn't exist")
  (assert-equal 0 (kv-cmd-lrem "inkey" -1 "value") "[LREM] Should return NIL if the count has a negative number")
  ]

[de test-commands-lset ()
  (assert-nil (kv-cmd-lset) "[LSET] Should return NIL if no key is provided")
  (assert-nil (kv-cmd-lset "nonexistant") "[LSET] Should return NIL if the key doesn't exist")
  (assert-nil (kv-cmd-lset "inkey" -1 "value" "one") "[LSET] Should return NIL if the index has a negative number")
  ]

[de test-commands-ltrim ()
  (assert-nil (kv-cmd-ltrim) "[LTRIM] Should return NIL if no key is provided")
  (assert-nil (kv-cmd-ltrim "nonexistant") "[LTRIM] Should return NIL if the key doesn't exist")
  (assert-nil (kv-cmd-ltrim "inkey" -1 -2) "[LTRIM] Should return NIL if the range has a negative number")
  ]

[de test-commands-rpoplpush ()
  (off *KV/inkey)
  (off *KV/outkey)
  (assert-nil (kv-cmd-rpoplpush) "[RPOPLPUSH] Should return NIL if no source is provided")
  (assert-nil (kv-cmd-rpoplpush "inkey") "[RPOPLPUSH] Should return NIL if no dest is provided")
  (assert-nil (kv-cmd-rpoplpush "nonexistant") "[RPOPLPUSH] Should return NIL if the key doesn't exist")
  (kv-cmd-rpush "inkey2" (kv-name "inkey2") '(5 6 7 8 9))
  (assert-equal 9 (kv-cmd-rpoplpush "inkey2" "outkey2") "[RPOPLPUSH] Should return the element being popped")
  (assert-equal 4 (kv-cmd-llen (kv-name "inkey2")) "[LLEN] Should list only 4 elements in the source key")
  (assert-equal 1 (kv-cmd-llen (kv-name "outkey2")) "[LLEN] Should list only 1 element in the dest key")
  (assert-equal 9 (kv-cmd-lindex "outkey2" 0) "[LINDEX] Should return the value of the popped key")
  (assert-equal 5 (kv-cmd-lindex "inkey2" 0) "[LINDEX] Should return the value of the first key")
  (assert-equal 8 (kv-cmd-rpoplpush "inkey2" "outkey2") "[RPOPLPUSH] Should return the element being popped (again)")
  ]

[de test-commands-del ()
  (kv-cmd-set "delkey1" "deletekey")
  (assert-equal 1 (kv-cmd-del "delkey1") "[DEL] Should delete a single key")
  (kv-cmd-rpush "delkey2" (kv-name "delkey2") '(0 0 1 1 0 1 0 0))
  (kv-cmd-rpush "delkey3" (kv-name "delkey3") '(0 0 1 1 0 1 1 0))
  (assert-equal 4 (kv-cmd-del "delkey2" (list "delkey3" "delkey4" "delkey5")) "[DEL] Should delete multiple keys and return how many were deleted")
  (assert-equal 0 (kv-cmd-llen (kv-name "delkey2")) "[LLEN] Should confirm if delkey2 was deleted")
  (assert-equal 0 (kv-cmd-llen (kv-name "delkey3")) "[LLEN] Should confirm if delkey3 was deleted")
  (assert-equal 0 (kv-cmd-del) "[DEL] Should not delete a key that isn't provided")
  ]

[de test-commands-process ()
  (assert-equal "Error: Unknown command" (kv-process 12345 (list "UNKNOWN")) "[PROCESS] Should return an ERROR message if the command is unknown")
  (assert-equal 1 (kv-process 12345 (list "DEL" '("processkey"))) "[PROCESS] Should process the DEL command")
  (assert-equal "OK" (kv-process 12345 (list "SET" '("processkey2" "processvalue"))) "[PROCESS] Should process the SET command")
  (assert-equal 15 (kv-process 12345 (list "APPEND" '("processkey2" "hey"))) "[PROCESS] Should process the APPEND command")
  (assert-equal "processvaluehey" (car (kv-process 12345 (list "GET" '("processkey2")))) "[PROCESS] Should process the GET command")
  (assert-equal 3 (kv-process 12345 (list "RPUSH" '("processkey" 11 22 33))) "[PROCESS] Should process the RPUSH command")
  (assert-equal '(11) (kv-process 12345 (list "LRANGE" '("processkey" "0" "0"))) "[PROCESS] Should process the LRANGE command")
  (assert-equal "OK 007" (kv-process 12345 (list "IDENT" (list "name" "007"))) "[PROCESS] Should process the IDENT command")
  (assert-kind-of 'String (kv-process 12345 (list "INFO")) "[PROCESS] Should process the INFO command")
  (assert-equal 22 (kv-process 12345 (list "LINDEX" '("processkey" "1"))) "[PROCESS] Should process the LINDEX command")
  (assert-equal 3 (kv-process 12345 (list "LLEN" '("processkey"))) "[PROCESS] Should process the LLEN command")
  (assert-equal 11 (kv-process 12345 (list "LPOP" '("processkey"))) "[PROCESS] Should process the LPOP command")
  (assert-equal 22 (kv-process 12345 (list "LPOPRPUSH" '("processkey" "processdest"))) "[PROCESS] Should process the LPOPRPUSH command")
  (assert-equal 3 (kv-process 12345 (list "LPUSH" '("processkey3" 44 55 66))) "[PROCESS] Should process the LPUSH command")
  (assert-equal 33 (kv-process 12345 (list "RPOP" '("processkey"))) "[PROCESS] Should process the RPOP command")
  (assert-equal 1 (kv-process 12345 (list "LREM" '("processkey3" "2" 44))) "[PROCESS] Should process the LREM command")
  (assert-equal "OK" (kv-process 12345 (list "LSET" '("processkey3" "1" "77"))) "[PROCESS] Should process the LSET command")
  (assert-equal "OK" (kv-process 12345 (list "LTRIM" '("processkey3" "0" "1"))) "[PROCESS] Should process the LTRIM command")
  (assert-kind-of 'String (kv-process 12345 (list "info" '("server"))) "[PROCESS] Should process a lowercase command")
  ]

[de test-commands-bgsave ()
  (kv-cmd-rpush "mylist" (kv-name "mylist") '("1" "2" "3" "4" "5" "6" "7" "8" "9" "10"))
  (let KV_desc (open *KV_aof)
    (kv-save-aof '("RPUSH" '("mylist" "1" "2" "3" "4" "5" "6" "7" "8" "9" "10")) KV_desc)
    (close KV_desc) )
  (assert-equal "OK" (kv-cmd-get "%stats%/aof_last_write_status") "[BGSAVE] Should be OK for saving a valid AOF entry")
  (kv-save-db-keys)
  (kv-write-db)
  (assert-equal 0 (kv-restore "DB" *KV_db) "[BGSAVE] Should return 0 when restoring the DB")
  (out *KV_db_lock (prinl "12345"))
  (assert-equal "Error: DB is locked for writing" (kv-locked?) "[BGSAVE] Should return an error if the DB is locked")
  (call 'rm "-f" *KV_db_lock)
  (assert-nil (kv-locked?) "[BGSAVE] Should return NIL if the DB is not locked")
  (assert-kind-of 'String (kv-timestamp) "[BGSAVE] Should return a UNIX timestamp")
  (kv-save-db-keys)
  (assert-kind-of 'List (info *KV_db_tmp) "[BGSAVE] Should return a list if a temp DB exists after saving the keys")
  (assert-t (kv-write-db) "[BGSAVE] Should write the DB to disk")
  (assert-equal 0 (kv-rewrite-aof) "[BGSAVE] Should return 0 when writing the AOF to disk")
  ]

[de test-commands-exists ()
  (kv-cmd-rpush "existlist" (kv-name "existlist") '("1" "2" "3" "4" "5" "6" "7" "8" "9" "10"))
  (kv-cmd-rpush "existlist2" (kv-name "existlist2") '("1" "2" "3" "4" "5" "6" "7" "8" "9" "10"))
  (assert-equal 1 (kv-cmd-exists "existlist") "[EXISTS] Should return 1 if the key exists")
  (assert-equal 0 (kv-cmd-exists "nonexists") "[EXISTS] Should return 0 if the key doesn't exist")
  (assert-equal 2 (kv-cmd-exists "existlist" '("existlist2")) "[EXISTS] Should return 2 if the two keys exist")
  (assert-equal 3 (kv-cmd-exists "existlist" '("existlist" "existlist2")) "[EXISTS] Should return 3 if the two keys exist and one is a duplicate")
  ]

[de test-commands-ping ()
  (assert-equal "PONG" (kv-cmd-ping) "[PING] Should return PONG")
  (assert-equal "Hello" (kv-cmd-ping "Hello") "[PING] Should return Hello")
  ]

[execute
  (prinl "^J  Testing Key/Value^J")

  '(assert-equal 0 (kv-cmd-llen (kv-name "nonexistant")) "[LLEN] Should return 0 if the key doesn't exist")
  '(test-commands-append)
  '(test-commands-del)
  '(test-commands-get-set)
  '(test-commands-ident)
  '(test-commands-info)
  '(test-commands-lindex)
  '(test-commands-lpop)
  '(test-commands-lpoprpush)
  '(test-commands-rpoplpush)
  '(test-commands-lpush)
  '(test-commands-lrange)
  '(test-commands-lrem)
  '(test-commands-lset)
  '(test-commands-ltrim)
  '(test-commands-rpush)
  '(test-commands-stats-failures)
  '(test-commands-process)
  '(test-commands-bgsave)
  '(test-commands-exists)
  '(test-commands-ping)
  ]
